import 'dart:async';
import 'package:flutter/material.dart';
import 'package:sqflite/sqflite.dart' as sql;

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      home: SafeArea(child: MyHomePage()),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key}) : super(key: key);

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  late DatabaseHelper _databaseHelper;
  List<Map<String, dynamic>> userData = [];
  final TextEditingController _nameEditingController = TextEditingController();
  final TextEditingController _categoryEditingController =
      TextEditingController();
  final TextEditingController _descriptionEditingController =
      TextEditingController();

  @override
  void initState() {
    super.initState();
    _databaseHelper = DatabaseHelper();
    _initializeDatabaseAndFetchData();
  }

  Future<void> _initializeDatabaseAndFetchData() async {
    await _databaseHelper.initializeDatabase();
    final List<Map<String, dynamic>> fetchedUserData =
        await _databaseHelper.fetchUserData();
    setState(() {
      userData = fetchedUserData;
    });
  }

  Future<void> _insertUserData(
      String name, String category, String description) async {
    await _databaseHelper.insertUserData(name, category, description);
    await _initializeDatabaseAndFetchData();
  }

  Future<void> _updateUserData(
      int id, String newName, String newCategory, String newDescription) async {
    await _databaseHelper.updateUserData(
        id, newName, newCategory, newDescription);
    await _initializeDatabaseAndFetchData();
  }

  Future<void> _deleteUserData(int id) async {
    await _databaseHelper.deleteUserData(id);
    await _initializeDatabaseAndFetchData();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.purple[100],
      appBar: AppBar(
        backgroundColor: Colors.purple[600],
        leading: const Icon(Icons.home_filled),
        title: const Text('Data Gudang'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            Expanded(
              child: userData.isEmpty
                  ? const Center(
                      child: Text('Tidak ada barang dalam list'),
                    )
                  : ListView.builder(
                      itemCount: userData.length,
                      itemBuilder: (BuildContext context, int index) {
                        final userDataItem = userData[index];
                        return GestureDetector(
                          onLongPress: () {
                            showDialog(
                              context: context,
                              builder: (context) {
                                return AlertDialog(
                                  title: const Text('Konfirmasi'),
                                  content: const Text(
                                      'Anda yakin ingin menghapus barang ini?'),
                                  actions: <Widget>[
                                    TextButton(
                                      onPressed: () {
                                        Navigator.of(context).pop();
                                      },
                                      child: const Text('Tidak'),
                                    ),
                                    TextButton(
                                      onPressed: () {
                                        _deleteUserData(userDataItem['id']);
                                        Navigator.of(context).pop();
                                      },
                                      child: const Text('Ya'),
                                    ),
                                  ],
                                );
                              },
                            );
                          },
                          child: Card(
                            elevation: 2,
                            margin: const EdgeInsets.symmetric(vertical: 5),
                            child: ListTile(
                              title: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text('ID: ${userDataItem['id']}'),
                                  Text('Nama: ${userDataItem['name']}'),
                                  Text('Kategori: ${userDataItem['category']}'),
                                  Text(
                                      'Deskripsi: ${userDataItem['description']}')
                                ],
                              ),
                              trailing: IconButton(
                                icon: const Icon(Icons.edit),
                                onPressed: () {
                                  showDialog(
                                    context: context,
                                    builder: (context) {
                                      String newName = userDataItem['name'];
                                      String newCategory =
                                          userDataItem['category'];
                                      String newDescription =
                                          userDataItem['description'];
                                      return AlertDialog(
                                        title: const Text('Edit Barang'),
                                        content: Column(
                                          mainAxisSize: MainAxisSize.min,
                                          children: [
                                            TextField(
                                              controller: TextEditingController(
                                                  text: newName),
                                              onChanged: (value) {
                                                newName = value;
                                              },
                                              decoration: const InputDecoration(
                                                labelText: 'Nama Barang',
                                              ),
                                            ),
                                            TextField(
                                              controller: TextEditingController(
                                                  text: newCategory),
                                              onChanged: (value) {
                                                newCategory = value;
                                              },
                                              decoration: const InputDecoration(
                                                labelText: 'Kategori Barang',
                                              ),
                                            ),
                                            TextField(
                                              controller: TextEditingController(
                                                  text: newDescription),
                                              onChanged: (value) {
                                                newDescription = value;
                                              },
                                              decoration: const InputDecoration(
                                                labelText: 'Deskripsi Barang',
                                              ),
                                            ),
                                          ],
                                        ),
                                        actions: <Widget>[
                                          TextButton(
                                            onPressed: () {
                                              Navigator.of(context).pop();
                                            },
                                            child: const Text('Batal'),
                                          ),
                                          TextButton(
                                            onPressed: () {
                                              _updateUserData(
                                                  userDataItem['id'],
                                                  newName,
                                                  newCategory,
                                                  newDescription);
                                              Navigator.of(context).pop();
                                            },
                                            child: const Text('Simpan'),
                                          ),
                                        ],
                                      );
                                    },
                                  );
                                },
                              ),
                            ),
                          ),
                        );
                      },
                    ),
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          showDialog(
            context: context,
            builder: (context) {
              return AlertDialog(
                title: const Text('Tambah Data Gudang'),
                content: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextField(
                      controller: _nameEditingController,
                      decoration: const InputDecoration(
                        labelText: 'Nama Barang',
                      ),
                    ),
                    TextField(
                      controller: _categoryEditingController,
                      decoration: const InputDecoration(
                        labelText: 'Kategori Barang',
                      ),
                    ),
                    TextField(
                      controller: _descriptionEditingController,
                      decoration: const InputDecoration(
                        labelText: 'Deskripsi Barang',
                      ),
                    ),
                  ],
                ),
                actions: <Widget>[
                  TextButton(
                    onPressed: () {
                      Navigator.of(context).pop();
                    },
                    child: const Text('Batal'),
                  ),
                  TextButton(
                    onPressed: () {
                      _insertUserData(
                          _nameEditingController.text,
                          _categoryEditingController.text,
                          _descriptionEditingController.text);
                      _nameEditingController.clear();
                      _categoryEditingController.clear();
                      _descriptionEditingController.clear();
                      Navigator.pop(context);
                    },
                    child: const Text('Simpan'),
                  ),
                ],
              );
            },
          );
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}

class DatabaseHelper {
  late sql.Database _db;

  Future<void> initializeDatabase() async {
    _db = await sql.openDatabase(
      'barang.db',
      version: 1,
      onCreate: (sql.Database db, int version) async {
        await db.execute(
          'CREATE TABLE barang(id INTEGER PRIMARY KEY, name TEXT, category TEXT, description TEXT)',
        );
      },
    );
  }

  Future<List<Map<String, dynamic>>> fetchUserData() async {
    return await _db.query('barang');
  }

  Future<void> insertUserData(
      String name, String category, String description) async {
    await _db.rawInsert(
      'INSERT INTO barang(name, category, description) VALUES(?, ?, ?)',
      [name, category, description],
    );
  }

  Future<void> updateUserData(
      int id, String newName, String newCategory, String newDescription) async {
    await _db.rawUpdate(
      'UPDATE barang SET name = ?, category = ?, description = ? WHERE id = ?',
      [newName, newCategory, newDescription, id],
    );
  }

  Future<void> deleteUserData(int id) async {
    await _db.rawDelete(
      'DELETE FROM barang WHERE id = ?',
      [id],
    );
  }
}
